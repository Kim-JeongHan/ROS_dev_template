# Docker Compose file for TurtleBot3 Behavior Examples
#
# Usage:
#
# To build the images:
#   docker compose build
#
# To start up a specific service by name:
#   docker compose up <service_name>
#
# To open an interactive shell to a running container:
#   docker exec -it <container_name> bash

version: "3.8"
services:
  # Base image containing dependencies.
  base:
    build:
      context: .
      dockerfile: docker/Dockerfile
      args:
        - REPO=${REPO}
        - ROS_DISTRO=${ROS_DISTRO}
      target: base
    image: ${REPO}-base:${ROS_DISTRO}
    # Interactive shell
    stdin_open: true
    tty: true
    # Networking and IPC for ROS 2
    network_mode: host
    ipc: host
    # Needed to display graphical applications
    privileged: True
    environment:
      # Allows graphical programs in the container.
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - NVIDIA_DRIVER_CAPABILITIES=all
      # Needed to run ROS 2 nodes
      - ROS_DOMAIN_ID=${ROS_DOMAIN_ID:-0}
      - TERM=xterm-256color
    volumes:
      # Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority
      # Mount devices and configuration files
      - /dev:/dev
      # Mount ssh keys and git config
      - ~/.ssh:${HOME}/.ssh:ro
      - ~/.gitconfig:${HOME}/.gitconfig:ro
      # Mount group and passwd files for user permissions
      - /etc/group:/etc/group:ro
      - /etc/passwd:/etc/passwd:ro
      - /etc/shadow:/etc/shadow:ro
  # Overlay image containing the example source code.
  gpu:
    extends: base
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: gpu
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
    image: ${REPO}-gpu:${ROS_DISTRO}
  cpu:
    extends: base
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: cpu
    image: ${REPO}-cpu:${ROS_DISTRO}
  gpu_dev:
    extends:
      service: gpu
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: gpu-dev
      args:
        - UID=${UID:-1000}
        - GID=${UID:-1000}
        - USERNAME=${USERNAME:-devuser}
        - WORKDIR=${WORKDIR}
    image: ${REPO}-gpu-dev:${ROS_DISTRO}
    volumes:
      # Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority
      # Mount the source code
      - ./${REPO}:/opt/${WORKDIR}/src/${REPO}:rw
      # Mount catkin build artifacts for faster rebuilds
      - ./.catkin/build/:/opt/${WORKDIR}/build/:rw
      - ./.catkin/devel/:/opt/${WORKDIR}/devel/:rw
    user: ${USERNAME:-devuser}
    command: bash -c "bash"
  gpu_prod:
    extends: gpu
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: gpu-prod
    image: ${REPO}-gpu-prod:${ROS_DISTRO}
  cpu_dev:
    extends: cpu
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: cpu-dev
      args:
        - UID=${UID:-1000}
        - GID=${UID:-1000}
        - USERNAME=${USERNAME:-devuser}
        - WORKDIR=${WORKDIR}
    image: ${REPO}-cpu-dev:${ROS_DISTRO}
    volumes:
      # Allows graphical programs in the container.
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ${XAUTHORITY:-$HOME/.Xauthority}:/root/.Xauthority
      # Mount the source code
      - ./${REPO}:/opt/${WORKDIR}/src/${REPO}:rw
      # Mount catkin build artifacts for faster rebuilds
      - ./.catkin/build/:/opt/${WORKDIR}/build/:rw
      - ./.catkin/devel/:/opt/${WORKDIR}/devel/:rw
    user: ${USERNAME:-devuser}
    command: bash -c "bash"
  cpu_prod:
    extends: cpu
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: cpu-prod
    image: ${REPO}-cpu-prod:${ROS_DISTRO}
